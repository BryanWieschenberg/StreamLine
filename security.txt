--- AUTHENTICATION & ACCOUNT SECURITY ---
Attempt to register with duplicate usernames
PASS
Attempt to log in with wrong password
PASS
Brute-forcing login with many incorrect attempts
FAIL - No rate limiting in lobby, only in-room
Ensure passwords are hashed in /data/users.json
PASS
Confirm password change flow overwrites old password hash correctly
PASS
Exported account file must not contain raw passwords or private keys
PASS

--- AUTHORIZATION / ACCESS CONTROL ---
Try assigning roles without being owner
PASS
Try banning a user who has higher/equal privilege
FAIL - No checks for this
Owner should not be demotable or kickable by anyone, including self
FAIL - Owner is not protected from this
Attempt to import a room you're not in
FAIL - No checks for this
Try to view /super users data while not in room
PASS

--- END-TO-END ENCRYPTION ---
Verify that private keys never leave the client
PASS
Verify that messages are encrypted before leaving client, and decrypted only on recipient
PASS
Attempt to inject garbage ciphertext, server should not crash
PASS
Confirm public key is shared securely on login
PASS
Verify command-based messages are also end-to-end encrypted
FAIL - Only normal messages have E2EE

--- FILE AND STORAGE INTEGRITY ---
Delete data/rooms.json, server should still run and recreate on new room creation
FAIL - JSON files must contain at least {}, and data is not protected from deletion
Ensure exported user/room files are JSON-valid and donâ€™t contain private keys
PASS
Verify that keys.json is only readable/writable by system owner
PASS

--- NETWORK BEHAVIOR / LAN ABUSE ---
Try multiple clients sending large messages rapidly, validate rate limiting kicks in
PASS
Try sending messages > 100 bytes, confirm truncation or rejection
PASS
Try injecting malformed command, parser should reject safely
PASS
Start two servers and connect to wrong one, ensure message encryption still holds (no shared keys)
PASS

--- PRIVACY / VISIBILITY TESTING ---
Hidden users should not appear in /user list, but should in /super users
PASS
Muted users should be blocked from using /msg, /me, /announce, etc.
FAIL - Works with all but /msg, can be circumvented with /ignore
Ignored users should not be able to DM you
PASS
Command /seen does not reveal users who were never in that room
PASS

--- ABUSE / RESILIENCE TESTING ---
Try Ctrl+C during write to rooms.json, should not corrupt the file
PASS
Delete rooms.json while server is running, server should not crash or panic
PASS
Concurrent access to same room by many clients, check for deadlocks
PASS

--- SANITIZATION / INJECTION TESTS ---
Try injecting terminal codes (\x1b[31m) in nicknames or messages, should be neutralized
PASS
Use Unicode/emoji in usernames or messages, ensure safe display and no encoding/decoding bugs
FAIL - Works with all but decryption, which cannot understand special characters
Try newline or quote characters in JSON-bound strings, ensure no storage injection
PASS

--- PERSISTANCE / RECOVERY ---
Restart server, all persistent user/room/role data should survive in users.json/rooms.json
PASS
Reboot client, private key should remain loaded from keys.json
PASS
Delete all data in keys.json and relogin, ensure regeneration and re-registration occurs cleanly
PASS
Confirm exported room or account JSON can be re-imported and re-used seamlessly
FAIL - Imports do not work correctly over LAN at the moment, only on server's machine

PASS - 28
FAIL - 9
TOTAL - 37

PASS RATE - 28/37 = 75.68%
